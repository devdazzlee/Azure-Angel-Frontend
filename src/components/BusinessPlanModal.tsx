import React, { useState } from "react";
import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm";
import { toast } from "react-toastify";

const BusinessPlanModal: React.FC<{
  open: boolean;
  onClose: () => void;
  plan: string;
  loading?: boolean;
  error?: string;
  onEditPlan?: () => void;
}> = ({ open, onClose, plan, loading = false, error, onEditPlan }) => {
  const [isDownloading, setIsDownloading] = useState(false);
  const [isSharing, setIsSharing] = useState(false);

  if (!open) return null;

  // Function to download PDF
  const handleDownloadPDF = async () => {
    setIsDownloading(true);
    try {
      // Create a downloadable text file with the business plan content
      const element = document.createElement('a');
      const file = new Blob([plan], { type: 'text/plain' });
      element.href = URL.createObjectURL(file);
      element.download = 'business-plan.txt';
      document.body.appendChild(element);
      element.click();
      document.body.removeChild(element);
      
      toast.success('Business plan downloaded successfully!');
    } catch (error) {
      toast.error('Failed to download business plan');
    } finally {
      setIsDownloading(false);
    }
  };

  // Function to share plan
  const handleSharePlan = async () => {
    setIsSharing(true);
    try {
      if (navigator.share) {
        await navigator.share({
          title: 'My Business Plan',
          text: 'Check out my business plan generated by Angel AI',
          url: window.location.href
        });
        toast.success('Business plan shared successfully!');
      } else {
        // Fallback: copy to clipboard
        await navigator.clipboard.writeText(plan);
        toast.success('Business plan copied to clipboard!');
      }
    } catch (error: any) {
      if (error.name !== 'AbortError') {
        // Fallback: copy to clipboard
        try {
          await navigator.clipboard.writeText(plan);
          toast.success('Business plan copied to clipboard!');
        } catch (clipboardError) {
          toast.error('Failed to share business plan');
        }
      }
    } finally {
      setIsSharing(false);
    }
  };

  // Function to edit plan
  const handleEditPlan = () => {
    if (onEditPlan) {
      onEditPlan();
      toast.info('Edit mode activated. You can now modify your business plan responses.');
    } else {
      toast.info('Edit functionality will be available soon.');
    }
  };

  const markdownComponents = {
    h1: ({ children }: { children?: React.ReactNode }) => (
      <h1 className="text-4xl font-bold text-slate-900 mb-6 mt-12 border-b border-slate-200 pb-3">
        {children}
      </h1>
    ),
    h2: ({ children }: { children?: React.ReactNode }) => (
      <h2 className="text-2xl font-semibold text-slate-800 mt-10 mb-4 border-l-4 border-blue-600 pl-4">
        {children}
      </h2>
    ),
    h3: ({ children }: { children?: React.ReactNode }) => (
      <h3 className="text-xl font-medium text-slate-700 mt-6 mb-2">{children}</h3>
    ),
    p: ({ children }: { children?: React.ReactNode }) => (
      <p className="text-slate-700 leading-relaxed mb-4">{children}</p>
    ),
    ul: ({ children }: { children?: React.ReactNode }) => (
      <ul className="list-disc ml-6 space-y-2 text-slate-700 mb-4">{children}</ul>
    ),
    ol: ({ children }: { children?: React.ReactNode }) => (
      <ol className="list-decimal ml-6 space-y-2 text-slate-700 mb-4">{children}</ol>
    ),
    li: ({ children }: { children?: React.ReactNode }) => (
      <li className="leading-relaxed text-slate-700">{children}</li>
    ),
    strong: ({ children }: { children?: React.ReactNode }) => (
      <strong className="text-slate-900 font-semibold">{children}</strong>
    ),
    blockquote: ({ children }: { children?: React.ReactNode }) => (
      <blockquote className="border-l-4 border-blue-400 bg-blue-50 p-4 italic rounded-md my-6 text-slate-700">
        {children}
      </blockquote>
    ),
    code: ({ children, inline }: { children?: React.ReactNode; inline?: boolean }) =>
      inline ? (
        <code className="bg-gray-100 text-blue-600 px-2 py-1 rounded text-sm font-mono">
          {children}
        </code>
      ) : (
        <pre className="bg-slate-900 text-green-400 p-4 rounded-lg overflow-x-auto text-sm font-mono">
          {children}
        </pre>
      ),
    hr: () => <hr className="my-10 border-slate-300" />,
    table: ({ children }: { children?: React.ReactNode }) => (
      <div className="overflow-x-auto my-6">
        <table className="min-w-full text-left border border-slate-200 rounded-md shadow-sm">
          {children}
        </table>
      </div>
    ),
    thead: ({ children }: { children?: React.ReactNode }) => (
      <thead className="bg-slate-100 text-slate-700 text-sm uppercase font-semibold border-b border-slate-200">
        {children}
      </thead>
    ),
    th: ({ children }: { children?: React.ReactNode }) => <th className="px-4 py-3">{children}</th>,
    td: ({ children }: { children?: React.ReactNode }) => (
      <td className="px-4 py-3 border-t border-slate-100">{children}</td>
    ),
  };

  return (
    <div className="fixed inset-0 z-50 bg-black/60 backdrop-blur-sm flex items-center justify-center">
      <div className="bg-white rounded-2xl w-[95vw] max-w-7xl h-[90vh] shadow-2xl overflow-hidden flex flex-col">
        {/* Header */}
        <div className="flex items-center justify-between bg-gradient-to-r from-slate-800 to-blue-900 px-6 py-4 text-white">
          <div className="flex items-center space-x-4">
            <div className="w-10 h-10 bg-white/10 rounded-lg flex items-center justify-center text-2xl">üìã</div>
            <div>
              <h2 className="text-lg font-bold">Business Plan Overview</h2>
              <p className="text-blue-200 text-xs">Generated by Angel AI</p>
            </div>
          </div>
          <button
            onClick={onClose}
            className="hover:bg-white/10 p-2 rounded-full transition"
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        {/* Main Content */}
        <main className="flex-1 overflow-y-auto px-8 py-6">
          {loading ? (
            <div className="h-full flex items-center justify-center text-slate-500">
              ‚è≥ Generating business plan...
            </div>
          ) : error ? (
            <div className="h-full flex flex-col items-center justify-center space-y-4 text-center">
              <div className="text-5xl">‚ö†Ô∏è</div>
              <h2 className="text-lg font-bold text-slate-800">Generation Error</h2>
              <p className="text-sm text-red-600">{error}</p>
              <button
                onClick={onClose}
                className="mt-3 px-4 py-2 bg-red-600 text-white rounded-lg"
              >
                Close
              </button>
            </div>
          ) : (
            <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-left leading-relaxed space-y-6">
              <ReactMarkdown components={markdownComponents} remarkPlugins={[remarkGfm]}>
                {plan}
              </ReactMarkdown>

              {/* Footer Buttons */}
              <div className="mt-12 flex flex-wrap gap-3 justify-center border-t border-slate-200 pt-6">
                <button 
                  onClick={handleDownloadPDF}
                  disabled={isDownloading}
                  className="bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 disabled:cursor-not-allowed text-white px-4 py-2 rounded-lg shadow-sm flex items-center gap-2 transition-colors duration-200"
                >
                  {isDownloading ? (
                    <>
                      <svg className="animate-spin w-4 h-4" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Downloading...
                    </>
                  ) : (
                    <>
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                      </svg>
                      Download PDF
                    </>
                  )}
                </button>
                <button 
                  onClick={handleSharePlan}
                  disabled={isSharing}
                  className="bg-green-600 hover:bg-green-700 disabled:bg-green-400 disabled:cursor-not-allowed text-white px-4 py-2 rounded-lg shadow-sm flex items-center gap-2 transition-colors duration-200"
                >
                  {isSharing ? (
                    <>
                      <svg className="animate-spin w-4 h-4" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Sharing...
                    </>
                  ) : (
                    <>
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
                      </svg>
                      Share Plan
                    </>
                  )}
                </button>
                <button 
                  onClick={handleEditPlan}
                  className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg shadow-sm flex items-center gap-2 transition-colors duration-200"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                  </svg>
                  Edit Plan
                </button>
              </div>
            </div>
          )}
        </main>
      </div>
    </div>
  );
};

export default BusinessPlanModal;
